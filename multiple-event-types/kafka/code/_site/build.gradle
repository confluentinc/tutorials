buildscript {
    repositories {
        mavenCentral()
        maven {
            url = uri("https://packages.confluent.io/maven/")
        }
        maven {
            url = uri("https://plugins.gradle.org/m2/")
        }
        maven {
            url = uri("https://jitpack.io")
        }
    }
    dependencies {
        classpath "com.github.jengelman.gradle.plugins:shadow:4.0.2"
    }
}

plugins {
    id "java"
    id "com.google.cloud.tools.jib" version "3.1.1"
    id "idea"
    id "eclipse"
    id "com.github.imflog.kafka-schema-registry-gradle-plugin" version "1.5.0"
    id "com.google.protobuf" version "0.8.17"
    id "com.github.davidmc24.gradle.plugin.avro" version "1.0.0"
}


sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11
version = "0.0.1"

repositories {
    mavenCentral()
    maven {
        url = uri("https://packages.confluent.io/maven/")
    }

    maven {
        url = uri("https://jitpack.io")
    }
}

apply plugin: "com.github.johnrengelman.shadow"

dependencies {
    implementation 'com.google.protobuf:protobuf-java:3.18.1'
    implementation 'org.apache.avro:avro:1.10.2'
    implementation 'org.slf4j:slf4j-simple:1.7.32'
    implementation "org.apache.kafka:kafka-streams:2.8.1"
    testImplementation "junit:junit:4.13.2"
    testImplementation 'org.hamcrest:hamcrest:2.2'
    implementation "io.confluent:kafka-avro-serializer:6.2.1"
    implementation "io.confluent:kafka-protobuf-serializer:6.2.1"
    implementation "io.confluent:kafka-protobuf-provider:6.2.1"
}

protobuf {
    generatedFilesBaseDir = "${project.buildDir}/generated-main-proto-java"

    protoc {
        artifact = 'com.google.protobuf:protoc:3.15.3'
    }
}

test {
    testLogging {
        outputs.upToDateWhen { false }
        showStandardStreams = true
        exceptionFormat = "full"
    }
}

jar {
  manifest {
    attributes(
      "Class-Path": configurations.compileClasspath.collect { it.getName() }.join(" "),
      "Main-Class": "io.confluent.developer.KafkaMultiEventConsumerApplication"
    )
  }
}

shadowJar {
    archiveBaseName = "multiple-event-types-standalone"
    archiveClassifier = ''
}

schemaRegistry {
    def props = new Properties()
    def configs = file("configuration/ccloud.properties")
    if (configs.exists()) {
        configs.withInputStream { props.load(it) }
        def srUrl = props.getProperty("schema.registry.url")
        def auth = props.getProperty("basic.auth.user.info").split(":")
        println "Using Confluent properties Schema Registry endpoint:${srUrl}, username:${auth[0]},password:${auth[1]}"

        url = srUrl

        credentials {
            // username is the characters up to the ':' in the basic.auth.user.info property
            username = auth[0]
            // password is everything after ':' in the basic.auth.user.info property
            password = auth[1]
        }
    } else {
        configs = file("configuration/dev.properties")
        configs.withInputStream { props.load(it) }
        def srUrl = props.getProperty("schema.registry.url")
        println "Using local dev properties Schema Registry endpoint:${srUrl}"
    }


    // Possible types are ["JSON", "PROTOBUF", "AVRO"]
    register {
        subject('page-view', 'src/main/avro/page_view.avsc', 'AVRO')
        subject('purchase', 'src/main/avro/purchase.avsc', 'AVRO')
        subject('avro-events-value', 'src/main/avro/all_events.avsc', 'AVRO')
                .addReference("io.confluent.developer.avro.PageView", "page-view", 1)
                .addReference("io.confluent.developer.avro.Purchase", "purchase", 1)
    }

}
