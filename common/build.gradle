buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'java'
    id 'application'
}

// the following 3 blocks allow other modules to depend on test artifacts in this module via:
//     testImplementation project(path: ':common', configuration: 'testArtifacts')
configurations {
    testArtifacts.extendsFrom testRuntime
}

task testJar(type: Jar) {
    from sourceSets.test.output
    archiveClassifier.set("test")
}

artifacts {
    testArtifacts testJar
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

repositories {
    mavenCentral()
    maven { url 'https://packages.confluent.io/maven/' }
}


dependencies {
    implementation 'org.slf4j:slf4j-simple:2.0.7'
    implementation('org.apache.kafka:kafka-clients') {
        version {
            strictly '3.8.0'
        }
    }
    implementation 'io.confluent:kafka-streams-avro-serde:7.7.0'
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
    testImplementation 'org.hamcrest:hamcrest:2.2'
    testImplementation 'org.testcontainers:testcontainers:1.20.1'
    testImplementation 'org.testcontainers:kafka:1.20.1'
    testImplementation 'commons-codec:commons-codec:1.17.0'
    testImplementation 'org.apache.flink:flink-sql-connector-kafka:3.2.0-1.19'
    testImplementation 'org.apache.flink:flink-connector-base:1.19.1'
    testImplementation 'org.apache.flink:flink-sql-avro-confluent-registry:1.19.1'
    testImplementation 'org.apache.flink:flink-test-utils:1.19.1'
    testImplementation 'org.apache.flink:flink-test-utils-junit:1.19.1'
    testImplementation 'org.apache.flink:flink-table-api-java-bridge:1.19.1'
    testImplementation 'org.apache.flink:flink-table-planner_2.12:1.19.1'
    testImplementation 'org.apache.flink:flink-table-planner_2.12:1.19.1:tests'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

test {
    useJUnitPlatform()
    testLogging {
        outputs.upToDateWhen { false }
        showStandardStreams = true
        events 'PASSED', 'SKIPPED', 'FAILED', 'STANDARD_OUT', 'STANDARD_ERROR'
        exceptionFormat = 'full'
    }
    jvmArgs '--add-opens', 'java.base/jdk.internal.loader=ALL-UNNAMED'
}

jar {
    manifest {
        attributes(
                'Class-Path': configurations.runtimeClasspath.collect { it.getName() }.join(' ')
        )
    }
}

