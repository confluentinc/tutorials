/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * To learn more about Gradle by exploring our Samples at https://docs.gradle.org/8.5/samples
 * This project uses @Incubating APIs which are subject to change.
 */

buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id "java"
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

repositories {
    mavenCentral()
    maven { url 'https://packages.confluent.io/maven/' }
}


dependencies {
    implementation project(':common')
    implementation "org.slf4j:slf4j-simple:2.0.7"
    implementation "io.confluent.parallelconsumer:parallel-consumer-core:0.5.2.4"
    implementation "org.apache.commons:commons-lang3:3.12.0"
    implementation "me.tongfei:progressbar:0.9.3"
    implementation 'org.awaitility:awaitility:4.2.0'

    implementation "com.typesafe:config:1.4.2"

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
    testImplementation 'org.hamcrest:hamcrest:2.2'
    testImplementation 'org.awaitility:awaitility:4.2.0'
    testImplementation "io.confluent.parallelconsumer:parallel-consumer-core:0.5.2.4:tests" // for LongPollingMockConsumer
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.2'
}

test {
    useJUnitPlatform()
    testLogging {
        outputs.upToDateWhen { false }
        showStandardStreams = true
        events "PASSED", "SKIPPED", "FAILED", "STANDARD_OUT", "STANDARD_ERROR"
        exceptionFormat = "full"
    }
}

jar {
    manifest {
        attributes(
                "Class-Path": configurations.runtimeClasspath.collect { it.getName() }.join(" ")
        )
    }
}

shadowJar {
    archiveBaseName = "parallel-consumer-standalone"
    archiveClassifier = ''
}
